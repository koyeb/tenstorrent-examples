name: Build and push models containers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  prepare-models-to-build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone tt-inference-server
        run: |
          git clone https://github.com/tenstorrent/tt-inference-server.git \
            --depth 1 \
            --single-branch \
            --branch dev \
            tt-inference-server

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: tt-inference-server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Python script to generate build matrix
        id: generate
        run: |
          PYTHONPATH=tt-inference-server python .github/utils/scripts/generate_models_matrix.py > matrix.json
          echo "Generated matrix:"
          cat matrix.json

      - name: Validate JSON with jq
        run: jq . matrix.json

      - name: Set matrix as output
        id: set-matrix
        run: |
          echo "matrix=$(cat matrix.json | jq -c .)" >> $GITHUB_OUTPUT

  build-model-dockerfiles:
    runs-on: koyeb-runner
    needs: prepare-models-to-build
    strategy:
      matrix: ${{ fromJson(needs.prepare-models-to-build.outputs.matrix) }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies for Dockerfile generation
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 huggingface_hub

      - name: Create output directory
        run: |
          mkdir -p ${{ matrix.model_name }}

      - name: Generate valid Docker tag
        id: tag
        run: |
          # Convert to lowercase and replace invalid characters
          TAG="tt-${{ matrix.device_type }}-${{ matrix.hf_model_repo }}"
          TAG=$(echo "$TAG" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          echo "docker_tag=koyeb/$TAG" >> $GITHUB_OUTPUT

      - name: Generate Dockerfile
        run: |
          python .github/utils/scripts/generate_dockerfile_from_tpl.py \
            --dockerfile-template vllm_template.Dockerfile.jinja \
            --dockerfile-output ${{ matrix.model_name }}/Dockerfile \
            --model ${{ matrix.hf_model_repo }} \
            --base-image "${{ matrix.docker_image }}" \
            --model-spec-json '${{ toJson(matrix) }}'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Koyeb Registry
        uses: docker/login-action@v3
        with:
          registry: registry01.prod.koyeb.com
          username: ${{ secrets.KOYEB_REGISTRY_USERNAME }}
          password: ${{ secrets.KOYEB_REGISTRY_PASSWORD }}

      - name: Login to Koyeb cache
        uses: docker/login-action@v3
        with:
          registry: registry01.prod.koyeb.com/internal-model-examples-cache-koyeb
          username: ${{ secrets.KOYEB_REGISTRY_USERNAME }}
          password: ${{ secrets.KOYEB_REGISTRY_PASSWORD }}

      - name: Build image for ${{ matrix.model_name }}
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ matrix.model_name }}
          file: ${{ matrix.model_name }}/Dockerfile
          network: host
          tags: |
            ${{ steps.tag.outputs.docker_tag }}
            registry01.prod.koyeb.com/${{ steps.tag.outputs.docker_tag }}
          secrets: |
            "hf_token=${{ secrets.HUGGINGFACE_TOKEN }}"
          cache-to: |
            type=registry,image-manifest=true,oci-mediatypes=true,compression=zstd,ref=registry01.prod.koyeb.com/internal-model-examples-cache-${{ steps.tag.outputs.docker_tag }}
          cache-from: |
            type=registry,ref=registry01.prod.koyeb.com/internal-model-examples-cache-${{ steps.tag.outputs.docker_tag }}
